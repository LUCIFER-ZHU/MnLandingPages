# Nginx 多域名配置示例
# 将此配置放在 /etc/nginx/sites-available/ 目录下，然后创建软链接到 /etc/nginx/sites-enabled/

# 产品1域名配置
server {
    listen 80;
    listen [::]:80;
    server_name product1.yourdomain.com;
    
    # HTTP 重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name product1.yourdomain.com;
    
    # SSL 证书配置
    ssl_certificate /path/to/ssl/product1.yourdomain.com.crt;
    ssl_certificate_key /path/to/ssl/product1.yourdomain.com.key;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 网站根目录
    root /var/www/landing-pages/dist;
    
    # 默认首页文件
    index product1.html;
    
    # 主要位置配置
    location / {
        try_files $uri $uri/ /product1.html;
        
        # 安全头部
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" always;
    }
    
    # 静态资源缓存配置
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 启用 gzip 压缩
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/css application/javascript image/svg+xml;
    }
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问备份文件
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # 访问日志
    access_log /var/log/nginx/product1.access.log;
    error_log /var/log/nginx/product1.error.log;
}

# 产品2域名配置
server {
    listen 80;
    listen [::]:80;
    server_name product2.yourdomain.com;
    
    # HTTP 重定向到 HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name product2.yourdomain.com;
    
    # SSL 证书配置
    ssl_certificate /path/to/ssl/product2.yourdomain.com.crt;
    ssl_certificate_key /path/to/ssl/product2.yourdomain.com.key;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 网站根目录
    root /var/www/landing-pages/dist;
    
    # 默认首页文件
    index product2.html;
    
    # 主要位置配置
    location / {
        try_files $uri $uri/ /product2.html;
        
        # 安全头部
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" always;
    }
    
    # 静态资源缓存配置
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 启用 gzip 压缩
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/css application/javascript image/svg+xml;
    }
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 禁止访问备份文件
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # 访问日志
    access_log /var/log/nginx/product2.access.log;
    error_log /var/log/nginx/product2.error.log;
}

# 产品3域名配置（示例）
server {
    listen 80;
    listen [::]:80;
    server_name product3.yourdomain.com;
    
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name product3.yourdomain.com;
    
    ssl_certificate /path/to/ssl/product3.yourdomain.com.crt;
    ssl_certificate_key /path/to/ssl/product3.yourdomain.com.key;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    root /var/www/landing-pages/dist;
    index product3.html;
    
    location / {
        try_files $uri $uri/ /product3.html;
        
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" always;
    }
    
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/css application/javascript image/svg+xml;
    }
    
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    access_log /var/log/nginx/product3.access.log;
    error_log /var/log/nginx/product3.error.log;
}

# 默认服务器配置（处理未匹配的域名）
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    
    server_name _;
    
    # 默认SSL证书（可以使用自签名证书）
    ssl_certificate /path/to/ssl/default.crt;
    ssl_certificate_key /path/to/ssl/default.key;
    
    # 禁止IP直接访问，返回444状态码
    return 444;
}

# 全局配置建议
# 在 /etc/nginx/nginx.conf 中添加以下配置：

# http {
#     # 隐藏 Nginx 版本信息
#     server_tokens off;
#     
#     # 启用 gzip 压缩
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_comp_level 6;
#     gzip_types
#         text/plain
#         text/css
#         text/xml
#         text/javascript
#         application/javascript
#         application/xml+rss
#         application/json
#         image/svg+xml;
#     
#     # 客户端缓冲区大小
#     client_body_buffer_size 128k;
#     client_max_body_size 10m;
#     client_header_buffer_size 1k;
#     large_client_header_buffers 4 4k;
#     
#     # 超时设置
#     client_body_timeout 12;
#     client_header_timeout 12;
#     keepalive_timeout 15;
#     send_timeout 10;
#     
#     # 速率限制
#     limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;
#     limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
#     
#     # 包含站点配置
#     include /etc/nginx/sites-enabled/*;
# }

# 部署说明：
# 1. 将构建后的文件上传到 /var/www/landing-pages/dist/ 目录
# 2. 确保文件权限正确：chown -R www-data:www-data /var/www/landing-pages/
# 3. 配置SSL证书（推荐使用 Let's Encrypt）
# 4. 测试配置：nginx -t
# 5. 重新加载配置：systemctl reload nginx
# 6. 配置DNS解析，将域名指向服务器IP

# SSL证书获取（使用 Certbot）：
# sudo apt install certbot python3-certbot-nginx
# sudo certbot --nginx -d product1.yourdomain.com -d product2.yourdomain.com -d product3.yourdomain.com

# 自动续期SSL证书：
# sudo crontab -e
# 添加：0 12 * * * /usr/bin/certbot renew --quiet